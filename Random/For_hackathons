from ultralytics import YOLO
import cv2
import face_recognition
import os
import numpy as np

# Load YOLOv8 face detection model (download yolov8n-face.pt first)
model = YOLO("yolov8n-face.pt")

# Step 1: Load known faces
known_encodings = []
known_names = []

photos_path = "photos"
for filename in os.listdir(photos_path):
    if filename.endswith((".jpg", ".png", ".jpeg")):
        path = os.path.join(photos_path, filename)
        image = face_recognition.load_image_file(path)
        encodings = face_recognition.face_encodings(image)
        if len(encodings) > 0:
            known_encodings.append(encodings[0])
            # take file name without extension as label
            known_names.append(os.path.splitext(filename)[0])
        else:
            print(f"[WARN] No face found in {filename}")

print("[INFO] Loaded faces:", known_names)

# Step 2: Start webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Step 3: Detect faces with YOLO
    results = model(frame, verbose=False)

    for r in results[0].boxes.xyxy:
        x1, y1, x2, y2 = map(int, r)
        face_crop = frame[y1:y2, x1:x2]

        # Convert cropped face for recognition
        rgb_face = cv2.cvtColor(face_crop, cv2.COLOR_BGR2RGB)
        encodings = face_recognition.face_encodings(rgb_face)

        name = "Unknown"
        if len(encodings) > 0:
            match = face_recognition.compare_faces(known_encodings, encodings[0])
            face_distances = face_recognition.face_distance(known_encodings, encodings[0])
            best_match_index = np.argmin(face_distances)
            if match[best_match_index]:
                name = known_names[best_match_index]

        # Draw box + name
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0,255,0), 2)
        cv2.putText(frame, name, (x1, y1-10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0,255,0), 2)

    cv2.imshow("Smart Face Recognition", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
